<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--扫描控制层组件-->
    <context:component-scan base-package="com.baimiaomiao"/>

    <!--注意：配置任意一个mvc:view-controller标签之后，
        其他控制器中的请求映射将全部失效，此时
        需要配置mvc:annotation-driven标签，否则无法实现首页内点击超链接向其他页面的跳转-->
    <mvc:view-controller path="/" view-name="index"/>
    <mvc:view-controller path="/test_rest" view-name="test_rest"/>
    <mvc:view-controller path="/test_view" view-name="test_view"/>
    <mvc:view-controller path="/file" view-name="file"/>

    <mvc:default-servlet-handler/>

    <!--配置MVC注解扫描（注解驱动）-->
    <mvc:annotation-driven/>

    <!--配置文件上传解析器，将上传的文件封装为MultipartFile-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.support.StandardServletMultipartResolver">
    </bean>

    <!--配置拦截器-->
    <mvc:interceptors>
        <!--用于测试拦截器的执行顺序-->
        <ref bean="firstInterceptor"/>
        <ref bean="secondInterceptor"/>

        <!--<bean class="com.baimiaomiao.interceptors.FirstInterceptor"/>-->
        <!--<ref bean="firstInterceptor"/>-->
        <!--以上两种都是对所有经过DispatcherServlet处理后的请求进行拦截-->

        <!--以下可以设置特定的拦截路径-->
        <!--
            ref或bean：设置拦截器
            mvc:mapping：设置拦截的请求地址
            mvc:exclude-mapping：设置不拦截的请求地址
        -->
        <!--<mvc:interceptor>
            &lt;!&ndash;拦截只有一层所有的请求（除开主页面）&ndash;&gt;
            <mvc:mapping path="/*"/>
            &lt;!&ndash;拦截所有层的所有请求（除开主页面）&ndash;&gt;
            &lt;!&ndash;<mvc:mapping path="/**"/>&ndash;&gt;
            <mvc:exclude-mapping path="/"/>
            <ref bean="firstInterceptor"/>
        </mvc:interceptor>-->
    </mvc:interceptors>

    <!--配置处理异常-->
    <!--经过测试发现，如果控制器方法出现错误，拦截器中的postHandler方法不会执行-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <!--
                properties的键表示处理器方法执行过程中出现的异常
                properties的值表示若出现一个指定异常，设置一个新的视图名称，跳转到指定页面
            -->
            <props>
                <prop key="java.lang.ArithmeticException">error</prop>
            </props>
        </property>
        <!--设置将异常信息共享在请求域中的键，可以在跳转到的视图或者页面中通过ex这个键取得异常信息-->
        <property name="exceptionAttribute" value="ex"/>
    </bean>


    <!--配置视图解析器-->
    <!-- SpringResourceTemplateResolver automatically integrates with Spring's own -->
    <!-- resource resolution infrastructure, which is highly recommended.          -->
    <bean id="templateResolver"
          class="org.thymeleaf.spring6.templateresolver.SpringResourceTemplateResolver">
        <property name="prefix" value="/WEB-INF/templates/"/>
        <property name="suffix" value=".html"/>
        <!-- HTML is the default value, added here for the sake of clarity.          -->
        <property name="templateMode" value="HTML"/>
        <!-- Template cache is true by default. Set to false if you want             -->
        <!-- templates to be automatically updated when modified.                    -->
        <property name="cacheable" value="true"/>

        <property name="characterEncoding" value="UTF-8"/>
    </bean>

    <!-- SpringTemplateEngine automatically applies SpringStandardDialect and      -->
    <!-- enables Spring's own MessageSource message resolution mechanisms.         -->
    <bean id="templateEngine"
          class="org.thymeleaf.spring6.SpringTemplateEngine">
        <property name="templateResolver" ref="templateResolver"/>
        <!-- Enabling the SpringEL compiler can speed up execution in most           -->
        <!-- scenarios, but might be incompatible with specific cases when           -->
        <!-- expressions in one template are reused across different data types, so  -->
        <!-- this flag is "false" by default for safer backwards compatibility.      -->
        <property name="enableSpringELCompiler" value="true"/>
    </bean>

    <bean class="org.thymeleaf.spring6.view.ThymeleafViewResolver">
        <property name="templateEngine" ref="templateEngine"/>
        <!-- NOTE 'order' and 'viewNames' are optional -->
        <property name="order" value="1"/>
        <!--        <property name="viewNames" value="*.html,*.xhtml" />-->
        <property name="characterEncoding" value="UTF-8"/>
    </bean>

</beans>