<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "https://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--java.util.Properties类。是一个Map集合。key和value都是String类型-->
    <!--在properties中可以配置很多属性-->
<!--    <properties resource="jdbc.properties">-->
        <!--这是其中的一个属性-->
        <!--<property name="key" value="value"/>-->
<!--    <property name="jdbc.driver" value="com.mysql.cj.jdbc.Driver"/>
        <property name="jdbc.url" value="jdbc:mysql://localhost:3306/powernode"/>
        <property name="jdbc.username" value="root"/>
        <property name="jdbc.password" value="mp102030.."/>-->
<!--    </properties>-->

    <!--  也可以这样写！   -->
    <!--<properties resource="jdbc.properties"/>-->
    <!--  从绝对路径中加载怎么写呢？ file:/// -->
    <!--但是不建议这样做，因为这样做可移植性不好-->
    <properties url="file:///Users/miaopeng/code/java/code_exercise/Mybatis/MyBatis03_Configuration/src/main/resources/jdbc.properties" />


    <!--default表示默认使用的环境-->
    <!--这里表示默认使用powernodeDB-->
    <environments default="powernodeDB">
        <!--一般一个数据库会对应一个SqlSessionFactory对象-->
        <!--一个环境environment会对应一个SqlSessionFactory对象-->
        <environment id="powernodeDB">
            <transactionManager type="JDBC"/>

            <!--
                dataSource配置：
                    1.dataSource被称为数据源
                    2.dataSource作用是什么？ 为程序提供Connection对象（但凡是给程序提供Connection对象的，都称为数据源）
                    3.数据源实际上是一套规范，JDK中有这套规范：javax.sql.DataSource（这歌数据源的规范，实际上是JDK规定的）
                    4.自己也可以编写数据源的组件，只要实现javax.sql.DataSource接口就行了。实现接口中的所有方法，相当于有了自己的数据源
                    比如你可以写一个属于自己的数据库连接池（数据库连接池是连接对象的，所以数据库连接池就是一个数据源）
                    5.常见的数据源组件有哪些？（常见的数据库连接池？）
                        阿里巴巴的德鲁伊连接池：druid
                        c3p0
                        dbcp
                        ......
                    6.type属性用来指定数据源的类型，就是指定具体用什么方式来获取Connection
                        type属性有三个值：必须是三选一
                            type="[UNPOOLED|POOLED|JNDI]"
                            UNPOOLED：不使用数据库连接池技术。每一次请求过来之后，都是创建新的Connection对象
                            POOLED：使用mybatis自己实现的数据库连接池
                            JNDI：集成第三方的数据库连接池

                            JNDI是一套规范，实际上大部分的web容器都实现了JNDI规范：
                                例如：Tomcat,Jetty,WebLogic,WebSphere
                            JNDI：java命名目录接口，Tomcat服务器实现了这套规范

            -->
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
                <!--poolMaximumActiveConnections：连接池当中最多的正在使用的链接对象的数量上限【最多有多少个链接可以活动】-->
                <property name="poolMaximumActiveConnections" value="10"/>
                <!--每隔2s打印日志，并且尝试获取连接对象-->
                <property name="poolTimeToWait" value="2000"/>
                <!--强行让某个连接空闲，超时时间的设置-->
                <property name="poolMaximumCheckoutTime" value="10000"/>
                <!--最多空闲数量-->
                <property name="poolMaximumIdleConnections" value="5"/>
            </dataSource>
        </environment>

        <!--这是mybatis的另一个环境，也就是连接的另一个数据库-->
        <environment id="mybatisDB">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/mybatis"/>
                <property name="username" value="root"/>
                <property name="password" value="mp102030.."/>
            </dataSource>
        </environment>


    </environments>


    <mappers>
        <mapper resource="CarMapper.xml"/>
        <mapper resource="UserMapper.xml"/>
    </mappers>

</configuration>
