<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.baimiaomiao.mybatis.mapper.CarMapper">

    <insert id="insertBatch">
        insert into t_car values
        <foreach collection="cars" item="car" separator=",">
            (null,#{car.carNum},#{car.brand},#{car.guidePrice},#{car.produceTime},#{car.carType})
        </foreach>
    </insert>

    <!--
        foreach标签的属性：
            collection：指定数组或集合
            item：代表数组或集合中的元素
            separator：循环之间的分隔符
            open：foreach循环拼接的所有sql语句的最前面以什么开始
            close：foreach循环拼接的所有sql语句的最后面以什么结束

        collection="ids" 第一次写这个的时候报错了，错误信息是：[array, arg0]
        什么意思？
            map.put("array",数组);
            map.put("arg0",数组);

        所以collection里面应该传array或者是argX
        当然也可以采用param注解
    -->
    <delete id="deleteByIds">
        <!--delete from t_car where id in(
        <foreach collection="ids" item="element" separator=",">
            #{element}
        </foreach>
        )-->
        <!--小括号也不用写了，可以用foreach里面的open和close属性代替-->
        delete from t_car where id in
        <foreach collection="ids" item="element" separator="," open="(" close=")">
            #{element}
        </foreach>
    </delete>

    <!--第二种写法-->
    <delete id="deleteByIds2">
        delete from t_car where
        <foreach collection="ids" item="id" separator="or">
            id = #{id}
        </foreach>
    </delete>

    <select id="selectByChoose" resultType="car">
        select * from t_car
        <where>
            <choose>
                <when test="brand != null and brand != ''">
                    brand like "%"#{brand}"%"
                </when>
                <when test="guidePrice != null and guidePrice != ''">
                    guide_price > #{guidePrice}
                </when>
                <otherwise>
                    car_type = #{carType}
                </otherwise>
            </choose>
        </where>
    </select>

    <update id="updateBySet">
        update t_car
        <set>
            <if test="carNum != null and carNum != ''">car_num = #{carNum},</if>
            <if test="brand != null and brand != ''">brand = #{brand},</if>
            <if test="guidePrice != null and guidePrice != ''">guide_price = #{guidePrice},</if>
            <if test="produceTime != null and produceTime != ''">produce_time = #{produceTime},</if>
            <if test="carType != null and carType != ''">car_type = #{carType},</if> <!--set标签会智能化去除SQL语句后面多余的","-->
        </set>
        where
            id = #{id}
    </update>
    
    <update id="updateById">
        update t_car set
            car_num = #{carNum},
            brand = #{brand},
            guide_price = #{guidePrice},
            produce_time = #{produceTime},
            car_type = #{carType}
        where
            id = #{id}
    </update>

    <select id="selectByMultiConditionWithTrim" resultType="car">
        select * from t_car
        <!--
            prefix 加前缀
            suffix 加后缀
            prefixOverrides 去前缀
            suffixOverrides 去后缀
        -->
        <!--prefix="where" 是在trim标签所有内容的前面添加where-->
        <!--suffixOverrides="and" 是在trim标签所有内容的后面去掉and-->
        <trim prefix="where" suffixOverrides="and" >
            <if test="brand != null and brand != ''">
                brand like "%"#{brand}"%" and
            </if>
            <if test="guidePrice != null and guidePrice != ''">
                and guide_price > #{guidePrice} and
            </if>
            <if test="carType != null and carType != ''">
                and car_type = #{carType}
            </if>
        </trim>
    </select>

    <select id="selectByMultiConditionWithWhere" resultType="car">
        select * from t_car
        <!--where标签专门负责where子句动态生成的，能够智能去掉最前面多余的and或or，不能去掉后面多余的and或or-->
        <where>
            <if test="brand != null and brand != ''">
                and brand like "%"#{brand}"%"
            </if>
            <if test="guidePrice != null and guidePrice != ''">
                and guide_price > #{guidePrice}
            </if>
            <if test="carType != null and carType != ''">
                and car_type = #{carType}
            </if>
        </where>

    </select>

    <select id="selectByMultiCondition" resultType="car">
        select * from t_car where 1 = 1
        <!--
            1.if标签中test属性是必须的
            2.test属性的值是false或true
            3.如果test属性是true，则if标签中的sql语句就会拼接。反之，则不会拼接
            4.test属性中可以使用的是：
                当是用来@param注解，那么test中要出现的是@Param注解指定的参数名
                当没有使用@param注解的时候，test中出现的是param1,param2,arg0,arg1
                当使用了POJO类，那么test中出现的是属性名
            5.在mybatis的动态SQL中不能使用&&，只能使用and
        -->
        <if test="brand != null and brand != ''">
            and brand like "%"#{brand}"%"
        </if>
        <if test="guidePrice != null and guidePrice != ''">
            and guide_price > #{guidePrice}
        </if>
        <if test="carType != null and carType != ''">
            and car_type = #{carType}
        </if>
    </select>
</mapper>